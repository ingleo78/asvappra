#include <malloc.h>
#include <cstring>
#include "ClassToString.h"
#include "DataOpenCL.h"

jstring platformToString(JNIEnv *env, jobject platform) {
    jclass Platform = env->GetObjectClass(platform);
    jclass Long = env->FindClass("java/lang/Long");
    jclass String = env->FindClass("java/lang/String");
    jmethodID getName = env->GetMethodID(Platform, "getName", "()Ljava/lang/String;");
    jmethodID getProfile = env->GetMethodID(Platform, "getProfile", "()Ljava/lang/String;");
    jmethodID getVendor = env->GetMethodID(Platform, "getVendor", "()Ljava/lang/String;");
    jmethodID getVersion = env->GetMethodID(Platform, "getVersion", "()Ljava/lang/String;");
    jmethodID getExtensions = env->GetMethodID(Platform, "getExtensions", "()Ljava/lang/String;");
    jmethodID getHostTimerResolution = env->GetMethodID(Platform, "getHostTimerResolution", "()J");
    jmethodID toStringLong = env->GetStaticMethodID(Long, "toString", "(J)Ljava/lang/String;");
    jmethodID concat = env->GetMethodID(String, "concat", "(Ljava/lang/String;)Ljava/lang/String;");
    jstring _getName = (jstring)env->CallObjectMethod(platform, getName);
    jstring _getProfile = (jstring)env->CallObjectMethod(platform, getProfile);
    jstring _getVendor = (jstring)env->CallObjectMethod(platform, getVendor);
    jstring _getVersion = (jstring)env->CallObjectMethod(platform, getVersion);
    jstring _getExtensions = (jstring)env->CallObjectMethod(platform, getExtensions);
    jlong _getHostTimerResolution = env->CallLongMethod(platform, getHostTimerResolution);
    jstring newLine = env->NewStringUTF("\n");
    jstring namePlatform = env->NewStringUTF("Name: ");
    jstring profilePlatform = env->NewStringUTF("Profile: ");
    jstring vendorPlatform = env->NewStringUTF("Vendor: ");
    jstring versionPlatform = env->NewStringUTF("Version: ");
    jstring extensionsPlatform = env->NewStringUTF("Extensions: ");
    jstring hostTimeResolution = env->NewStringUTF("HostTimerResolution: ");
    jstring nanoSeconds = env->NewStringUTF(" nSec\n");
    jstring timerResolution = (jstring)env->CallStaticObjectMethod(Long, toStringLong, _getHostTimerResolution);
    jstring toString = namePlatform;
    toString = (jstring)env->CallObjectMethod(toString, concat, _getName);
    toString = (jstring)env->CallObjectMethod(toString, concat, newLine);
    toString = (jstring)env->CallObjectMethod(toString, concat, profilePlatform);
    toString = (jstring)env->CallObjectMethod(toString, concat, _getProfile);
    toString = (jstring)env->CallObjectMethod(toString, concat, newLine);
    toString = (jstring)env->CallObjectMethod(toString, concat, vendorPlatform);
    toString = (jstring)env->CallObjectMethod(toString, concat, _getVendor);
    toString = (jstring)env->CallObjectMethod(toString, concat, newLine);
    toString = (jstring)env->CallObjectMethod(toString, concat, versionPlatform);
    toString = (jstring)env->CallObjectMethod(toString, concat, _getVersion);
    toString = (jstring)env->CallObjectMethod(toString, concat, newLine);
    toString = (jstring)env->CallObjectMethod(toString, concat, extensionsPlatform);
    toString = (jstring)env->CallObjectMethod(toString, concat, _getExtensions);
    toString = (jstring)env->CallObjectMethod(toString, concat, newLine);
    toString = (jstring)env->CallObjectMethod(toString, concat, hostTimeResolution);
    toString = (jstring)env->CallObjectMethod(toString, concat, timerResolution);
    toString = (jstring)env->CallObjectMethod(toString, concat, nanoSeconds);
    toString = (jstring)env->CallObjectMethod(toString, concat, newLine);
    return toString;
}
jstring deviceToString(JNIEnv *env, jobject device) {
    jclass Device = env->GetObjectClass(device);
    jclass Platform = env->FindClass("com/draico/asvappra/opencl/Platform");
    jclass Arrays = env->FindClass("java/util/Arrays");
    jclass Boolean = env->FindClass("java/lang/Boolean");
    jclass Double = env->FindClass("java/lang/Double");
    jclass Integer = env->FindClass("java/lang/Integer");
    jclass Long = env->FindClass("java/lang/Long");
    jclass String = env->FindClass("java/lang/String");
    jmethodID toStringPlatform = env->GetMethodID(Platform, "toString", "()Ljava/lang/String;");
    jmethodID toStringArrays = env->GetStaticMethodID(Arrays, "toString", "([I)Ljava/lang/String;");
    jmethodID toStringBoolean = env->GetStaticMethodID(Boolean, "toString", "(Z)Ljava/lang/String;");
    jmethodID toStringDouble = env->GetStaticMethodID(Double, "toString", "(D)Ljava/lang/String;");
    jmethodID toStringInteger = env->GetStaticMethodID(Integer, "toString", "(I)Ljava/lang/String;");
    jmethodID toStringLong = env->GetStaticMethodID(Long, "toString", "(J)Ljava/lang/String;");
    jmethodID concat = env->GetMethodID(String, "concat", "(Ljava/lang/String;)Ljava/lang/String;");
    jmethodID getType = env->GetMethodID(Device, "getType", "()Ljava/lang/String;");
    jmethodID getVendorId = env->GetMethodID(Device, "getVendorId", "()I");
    jmethodID getMaxComputeUnits = env->GetMethodID(Device, "getMaxComputeUnits", "()I");
    jmethodID getMaxWorkItemDimensions = env->GetMethodID(Device, "getMaxWorkItemDimensions", "()I");
    jmethodID getMaxWorkItemSizes = env->GetMethodID(Device, "getMaxWorkItemSizes", "()[I");
    jmethodID getMaxWorkGroupSize = env->GetMethodID(Device, "getMaxWorkGroupSize", "()I");
    jmethodID getPreferredVectorWidthChar = env->GetMethodID(Device, "getPreferredVectorWidthChar", "()I");
    jmethodID getPreferredVectorWidthShort = env->GetMethodID(Device, "getPreferredVectorWidthShort", "()I");
    jmethodID getPreferredVectorWidthInt = env->GetMethodID(Device, "getPreferredVectorWidthInt", "()I");
    jmethodID getPreferredVectorWidthLong = env->GetMethodID(Device, "getPreferredVectorWidthLong", "()I");
    jmethodID getPreferredVectorWidthFloat = env->GetMethodID(Device, "getPreferredVectorWidthFloat", "()I");
    jmethodID getPreferredVectorWidthDouble = env->GetMethodID(Device, "getPreferredVectorWidthDouble", "()I");
    jmethodID getPreferredVectorWidthHalf = env->GetMethodID(Device, "getPreferredVectorWidthHalf", "()I");
    jmethodID getNativeVectorWidthChar = env->GetMethodID(Device, "getNativeVectorWidthChar", "()I");
    jmethodID getNativeVectorWidthShort = env->GetMethodID(Device, "getNativeVectorWidthShort", "()I");
    jmethodID getNativeVectorWidthInt = env->GetMethodID(Device, "getNativeVectorWidthInt", "()I");
    jmethodID getNativeVectorWidthLong = env->GetMethodID(Device, "getNativeVectorWidthLong", "()I");
    jmethodID getNativeVectorWidthFloat = env->GetMethodID(Device, "getNativeVectorWidthFloat", "()I");
    jmethodID getNativeVectorWidthDouble = env->GetMethodID(Device, "getNativeVectorWidthDouble", "()I");
    jmethodID getNativeVectorWidthHalf = env->GetMethodID(Device, "getNativeVectorWidthHalf", "()I");
    jmethodID getMaxClockFrequency = env->GetMethodID(Device, "getMaxClockFrequency", "()I");
    jmethodID getAddressBits = env->GetMethodID(Device, "getAddressBits", "()I");
    jmethodID getMaxMemAllocSize = env->GetMethodID(Device, "getMaxMemAllocSize", "()J");
    jmethodID getImageSupport = env->GetMethodID(Device, "getImageSupport", "()Z");
    jmethodID getMaxReadImageArgs = env->GetMethodID(Device, "getMaxReadImageArgs", "()I");
    jmethodID getMaxWriteImageArgs = env->GetMethodID(Device, "getMaxWriteImageArgs", "()I");
    jmethodID getMaxReadWriteImageArgs = env->GetMethodID(Device, "getMaxReadWriteImageArgs", "()I");
    jmethodID getILVersion = env->GetMethodID(Device, "getILVersion", "()Ljava/lang/String;");
    jmethodID getImage2DMaxWidth = env->GetMethodID(Device, "getImage2DMaxWidth", "()I");
    jmethodID getImage2DMaxHeight = env->GetMethodID(Device, "getImage2DMaxHeight", "()I");
    jmethodID getImage3DMaxWidth = env->GetMethodID(Device, "getImage3DMaxWidth", "()I");
    jmethodID getImage3DMaxHeight = env->GetMethodID(Device, "getImage3DMaxHeight", "()I");
    jmethodID getImage3DMaxDepth = env->GetMethodID(Device, "getImage3DMaxDepth", "()I");
    jmethodID getImageMaxBufferSize = env->GetMethodID(Device, "getImageMaxBufferSize", "()I");
    jmethodID getImageMaxArraySize = env->GetMethodID(Device, "getImageMaxArraySize", "()I");
    jmethodID getMaxSamplers = env->GetMethodID(Device, "getMaxSamplers", "()I");
    jmethodID getImagePitchAlignment = env->GetMethodID(Device, "getImagePitchAlignment", "()I");
    jmethodID getImageBaseAddressAlignment = env->GetMethodID(Device, "getImageBaseAddressAlignment", "()I");
    jmethodID getMaxPipeArgs = env->GetMethodID(Device, "getMaxPipeArgs", "()I");
    jmethodID getPipeMaxActiveReservations = env->GetMethodID(Device, "getPipeMaxActiveReservations", "()I");
    jmethodID getPipeMaxPacketSize = env->GetMethodID(Device, "getPipeMaxPacketSize", "()I");
    jmethodID getMaxParameterSize = env->GetMethodID(Device, "getMaxParameterSize", "()I");
    jmethodID getMemBaseAddressAlign = env->GetMethodID(Device, "getMemBaseAddressAlign", "()I");
    jmethodID getSingleFPConfig = env->GetMethodID(Device, "getSingleFPConfig", "()Ljava/lang/String;");
    jmethodID getDoubleFPConfig = env->GetMethodID(Device, "getDoubleFPConfig", "()Ljava/lang/String;");
    jmethodID getGlobalMemCacheType = env->GetMethodID(Device, "getGlobalMemCacheType", "()Ljava/lang/String;");
    jmethodID getGlobalMemCachelineSize = env->GetMethodID(Device, "getGlobalMemCachelineSize", "()I");
    jmethodID getGlobalMemCacheSize = env->GetMethodID(Device, "getGlobalMemCacheSize", "()J");
    jmethodID getLocalMemType = env->GetMethodID(Device, "getLocalMemType", "()Ljava/lang/String;");
    jmethodID getGlobalMemSize = env->GetMethodID(Device, "getGlobalMemSize", "()J");
    jmethodID getErrorCorrectionSupport = env->GetMethodID(Device, "getErrorCorrectionSupport", "()Z");
    jmethodID getMaxConstantBufferSize = env->GetMethodID(Device, "getMaxConstantBufferSize", "()J");
    jmethodID getMaxConstantArgs = env->GetMethodID(Device, "getMaxConstantArgs", "()I");
    jmethodID getMaxGlobalVariableSize = env->GetMethodID(Device, "getMaxGlobalVariableSize", "()I");
    jmethodID getGlobalVariablePreferredTotalSize = env->GetMethodID(Device, "getGlobalVariablePreferredTotalSize", "()I");
    jmethodID getLocalMemSize = env->GetMethodID(Device, "getLocalMemSize", "()J");
    jmethodID getProfilingTimerResolution = env->GetMethodID(Device, "getProfilingTimerResolution", "()I");
    jmethodID getEndianLittle = env->GetMethodID(Device, "getEndianLittle", "()Z");
    jmethodID getAvailable = env->GetMethodID(Device, "getAvailable", "()Z");
    jmethodID getCompilerAvailable = env->GetMethodID(Device, "getCompilerAvailable", "()Z");
    jmethodID getLinkerAvailable = env->GetMethodID(Device, "getLinkerAvailable", "()Z");
    jmethodID getExecutionCapabilities = env->GetMethodID(Device, "getExecutionCapabilities", "()Ljava/lang/String;");
    jmethodID getQueueOnHostProperties = env->GetMethodID(Device, "getQueueOnHostProperties", "()I");
    jmethodID getQueueOnDeviceProperties = env->GetMethodID(Device, "getQueueOnDeviceProperties", "()Ljava/lang/String;");
    jmethodID getQueueOnDevicePreferredSize = env->GetMethodID(Device, "getQueueOnDevicePreferredSize", "()I");
    jmethodID getQueueOnDeviceMaxSize = env->GetMethodID(Device, "getQueueOnDeviceMaxSize", "()I");
    jmethodID getMaxOnDeviceQueues = env->GetMethodID(Device, "getMaxOnDeviceQueues", "()I");
    jmethodID getMaxOnDeviceEvents = env->GetMethodID(Device, "getMaxOnDeviceEvents", "()I");
    jmethodID getBuildInKernels = env->GetMethodID(Device, "getBuildInKernels", "()Ljava/lang/String;");
    jmethodID getPlatform = env->GetMethodID(Device, "getPlatform", "()Lcom/draico/opencl/Platform;");
    jmethodID getName = env->GetMethodID(Device, "getName", "()Ljava/lang/String;");
    jmethodID getVendor = env->GetMethodID(Device, "getVendor", "()Ljava/lang/String;");
    jmethodID getDriverVersion = env->GetMethodID(Device, "getDriverVersion", "()Ljava/lang/String;");
    jmethodID getProfile = env->GetMethodID(Device, "getProfile", "()Ljava/lang/String;");
    jmethodID getVersion = env->GetMethodID(Device, "getVersion", "()Ljava/lang/String;");
    jmethodID getOpenCL_C_Version = env->GetMethodID(Device, "getOpenCL_C_Version", "()Ljava/lang/String;");
    jmethodID getExtensions = env->GetMethodID(Device, "getExtensions", "()Ljava/lang/String;");
    jmethodID getPrintfBufferSize = env->GetMethodID(Device, "getPrintfBufferSize", "()I");
    jmethodID getPreferredInteropUserSync = env->GetMethodID(Device, "getPreferredInteropUserSync", "()Z");
    jmethodID getPartitionMaxSubDevices = env->GetMethodID(Device, "getPartitionMaxSubDevices", "()I");
    jmethodID getPartitionProperties = env->GetMethodID(Device, "getPartitionProperties", "()Ljava/lang/String;");
    jmethodID getPartitionAffinityDomain = env->GetMethodID(Device, "getPartitionAffinityDomain", "()Ljava/lang/String;");
    jmethodID getPartitionType = env->GetMethodID(Device, "getPartitionType", "()Ljava/lang/String;");
    jmethodID getReferenceCount = env->GetMethodID(Device, "getReferenceCount", "()I");
    jmethodID getSVMCapabilities = env->GetMethodID(Device, "getSVMCapabilities", "()Ljava/lang/String;");
    jmethodID getPreferredPlatformAtomicAlignment = env->GetMethodID(Device, "getPreferredPlatformAtomicAlignment", "()I");
    jmethodID getPreferredGlobalAtomicAlignment = env->GetMethodID(Device, "getPreferredGlobalAtomicAlignment", "()I");
    jmethodID getPreferredLocalAtomicAlignment = env->GetMethodID(Device, "getPreferredLocalAtomicAlignment", "()I");
    jmethodID getMaxNumSubGroups = env->GetMethodID(Device, "getMaxNumSubGroups", "()I");
    jmethodID getSubGroupIndependentForwardProgress = env->GetMethodID(Device, "getSubGroupIndependentForwardProgress", "()Z");
    jstring type = (jstring)env->CallObjectMethod(device, getType);
    jint vendorId = env->CallIntMethod(device, getVendorId);
    jint maxComputeUnits = env->CallIntMethod(device, getMaxComputeUnits);
    jint maxWorkItemDimensions = env->CallIntMethod(device, getMaxWorkItemDimensions);
    jintArray maxWorkItemSizes = (jintArray)env->CallObjectMethod(device, getMaxWorkItemSizes);
    jint maxWorkGroupSize = env->CallIntMethod(device, getMaxWorkGroupSize);
    jint preferredVectorWidthChar = env->CallIntMethod(device, getPreferredVectorWidthChar);
    jint preferredVectorWidthShort = env->CallIntMethod(device, getPreferredVectorWidthShort);
    jint preferredVectorWidthInt = env->CallIntMethod(device, getPreferredVectorWidthInt);
    jint preferredVectorWidthLong = env->CallIntMethod(device, getPreferredVectorWidthLong);
    jint preferredVectorWidthFloat = env->CallIntMethod(device, getPreferredVectorWidthFloat);
    jint preferredVectorWidthDouble = env->CallIntMethod(device, getPreferredVectorWidthDouble);
    jint preferredVectorWidthHalf = env->CallIntMethod(device, getPreferredVectorWidthHalf);
    jint nativeVectorWidthChar = env->CallIntMethod(device, getNativeVectorWidthChar);
    jint nativeVectorWidthShort = env->CallIntMethod(device, getNativeVectorWidthShort);
    jint nativeVectorWidthInt = env->CallIntMethod(device, getNativeVectorWidthInt);
    jint nativeVectorWidthLong = env->CallIntMethod(device, getNativeVectorWidthLong);
    jint nativeVectorWidthFloat = env->CallIntMethod(device, getNativeVectorWidthFloat);
    jint nativeVectorWidthDouble = env->CallIntMethod(device, getNativeVectorWidthDouble);
    jint nativeVectorWidthHalf = env->CallIntMethod(device, getNativeVectorWidthHalf);
    jint maxClockFrequency = env->CallIntMethod(device, getMaxClockFrequency);
    jint addressBits = env->CallIntMethod(device, getAddressBits);
    jlong maxMemAllocSize = env->CallLongMethod(device, getMaxMemAllocSize);
    jboolean imageSupport = env->CallBooleanMethod(device, getImageSupport);
    jint maxReadImageArgs = env->CallIntMethod(device, getMaxReadImageArgs);
    jint maxWriteImageArgs = env->CallIntMethod(device, getMaxWriteImageArgs);
    jint maxReadWriteImageArgs = env->CallIntMethod(device, getMaxReadWriteImageArgs);
    jstring ILVersion = (jstring)env->CallObjectMethod(device, getILVersion);
    jint image2DMaxWidth = env->CallIntMethod(device, getImage2DMaxWidth);
    jint image2DMaxHeigth = env->CallIntMethod(device, getImage2DMaxHeight);
    jint image3DMaxWidth = env->CallIntMethod(device, getImage3DMaxWidth);
    jint image3DMaxHeigth = env->CallIntMethod(device, getImage3DMaxHeight);
    jint image3DMaxDepth = env->CallIntMethod(device, getImage3DMaxDepth);
    jint imageMaxBufferSize = env->CallIntMethod(device, getImageMaxBufferSize);
    jint imageMaxArraySize = env->CallIntMethod(device, getImageMaxArraySize);
    jint maxSamplers = env->CallIntMethod(device, getMaxSamplers);
    jint imagePitchAlignment = env->CallIntMethod(device, getImagePitchAlignment);
    jint imageBaseAddressAlignment = env->CallIntMethod(device, getImageBaseAddressAlignment);
    jint maxPipeArgs = env->CallIntMethod(device, getMaxPipeArgs);
    jint pipeMaxActiveReservations = env->CallIntMethod(device, getPipeMaxActiveReservations);
    jint pipeMaxPacketSize = env->CallIntMethod(device, getPipeMaxPacketSize);
    jint maxParameterSize = env->CallIntMethod(device, getMaxParameterSize);
    jint memBaseAddressAlign = env->CallIntMethod(device, getMemBaseAddressAlign);
    jstring singleFPConfig = (jstring)env->CallObjectMethod(device, getSingleFPConfig);
    jstring doubleFPConfig = (jstring)env->CallObjectMethod(device, getDoubleFPConfig);
    jstring globalMemCacheType = (jstring)env->CallObjectMethod(device, getGlobalMemCacheType);
    jint globalMemCachelineSize = env->CallIntMethod(device, getGlobalMemCachelineSize);
    jlong globalMemCacheSize = env->CallLongMethod(device, getGlobalMemCacheSize);
    jstring localMemType = (jstring)env->CallObjectMethod(device, getLocalMemType);
    jlong globalMemSize = env->CallLongMethod(device, getGlobalMemSize);
    jboolean errorCorrectionSupport = env->CallBooleanMethod(device, getErrorCorrectionSupport);
    jlong maxConstantBufferSize = env->CallLongMethod(device, getMaxConstantBufferSize);
    jint maxConstantArgs = env->CallIntMethod(device, getMaxConstantArgs);
    jint maxGlobalVariableSize = env->CallIntMethod(device, getMaxGlobalVariableSize);
    jint globalVariablePreferredTotalSize = env->CallIntMethod(device, getGlobalVariablePreferredTotalSize);
    jlong localMemSize = env->CallLongMethod(device, getLocalMemSize);
    jint profilingTimerResolution = env->CallIntMethod(device, getProfilingTimerResolution);
    jboolean endianLittle = env->CallBooleanMethod(device, getEndianLittle);
    jboolean available = env->CallBooleanMethod(device, getAvailable);
    jboolean compilerAvailable = env->CallBooleanMethod(device, getCompilerAvailable);
    jboolean linkerAvailable = env->CallBooleanMethod(device, getLinkerAvailable);
    jstring executionCapabilities = (jstring)env->CallObjectMethod(device, getExecutionCapabilities);
    jint queueOnHostProperties = env->CallIntMethod(device, getQueueOnHostProperties);
    jstring queueOnDeviceProperties = (jstring)env->CallObjectMethod(device, getQueueOnDeviceProperties);
    jint queueOnDevicePreferredSize = env->CallIntMethod(device, getQueueOnDevicePreferredSize);
    jint queueOnDeviceMaxSize = env->CallIntMethod(device, getQueueOnDeviceMaxSize);
    jint maxOnDeviceQueues = env->CallIntMethod(device, getMaxOnDeviceQueues);
    jint maxOnDeviceEvents = env->CallIntMethod(device, getMaxOnDeviceEvents);
    jstring buildInKernels = (jstring)env->CallObjectMethod(device, getBuildInKernels);
    jobject platform = env->CallObjectMethod(device, getPlatform);
    jstring name = (jstring)env->CallObjectMethod(device, getName);
    jstring vendor = (jstring)env->CallObjectMethod(device, getVendor);
    jstring driverVersion = (jstring)env->CallObjectMethod(device, getDriverVersion);
    jstring profile = (jstring)env->CallObjectMethod(device, getProfile);
    jstring version = (jstring)env->CallObjectMethod(device, getVersion);
    jstring openCL_C_Version = (jstring)env->CallObjectMethod(device, getOpenCL_C_Version);
    jstring extensions = (jstring)env->CallObjectMethod(device, getExtensions);
    jint printfBufferSize = env->CallIntMethod(device, getPrintfBufferSize);
    jboolean preferredInteropUserSync = env->CallBooleanMethod(device, getPreferredInteropUserSync);
    jint partitionMaxSubDevices = env->CallIntMethod(device, getPartitionMaxSubDevices);
    jstring partitionProperties = (jstring)env->CallObjectMethod(device, getPartitionProperties);
    jstring partitionAffinityDomain = (jstring)env->CallObjectMethod(device, getPartitionAffinityDomain);
    jstring partitionType = (jstring)env->CallObjectMethod(device, getPartitionType);
    jint referenceCount = env->CallIntMethod(device, getReferenceCount);
    jstring SVMCapabilities = (jstring)env->CallObjectMethod(device, getSVMCapabilities);
    jint preferredPlatformAtomicAlignment = env->CallIntMethod(device, getPreferredPlatformAtomicAlignment);
    jint preferredGlobalAtomicAlignment = env->CallIntMethod(device, getPreferredGlobalAtomicAlignment);
    jint preferredLocalAtomicAlignment = env->CallIntMethod(device, getPreferredLocalAtomicAlignment);
    jint maxNumSubGroups = env->CallIntMethod(device, getMaxNumSubGroups);
    jboolean subGroupIndependentForwardProgress = env->CallBooleanMethod(device, getSubGroupIndependentForwardProgress);
    jstring nameInfo;
    jstring value;
    jstring dataTemp = env->NewStringUTF("");
    jstring toString = env->NewStringUTF("");
    nameInfo = env->NewStringUTF("\nDevice type: ");
    toString = concatString(env, toString, nameInfo, type, dataTemp);
    nameInfo = env->NewStringUTF("Name: ");
    toString = concatString(env, toString, nameInfo, name, dataTemp);
    nameInfo = env->NewStringUTF("Vendor: ");
    toString = concatString(env, toString, nameInfo, vendor, dataTemp);
    nameInfo = env->NewStringUTF("Driver version: ");
    toString = concatString(env, toString, nameInfo, driverVersion, dataTemp);
    nameInfo = env->NewStringUTF("Profile: ");
    toString = concatString(env, toString, nameInfo, profile, dataTemp);
    nameInfo = env->NewStringUTF("Version: ");
    toString = concatString(env, toString, nameInfo, version, dataTemp);
    nameInfo = env->NewStringUTF("OpenCL C Version: ");
    toString = concatString(env, toString, nameInfo, openCL_C_Version, dataTemp);
    nameInfo = env->NewStringUTF("Extensions: ");
    toString = concatString(env, toString, nameInfo, extensions, dataTemp);
    nameInfo = env->NewStringUTF("Vendor: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, vendorId);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Maximum Compute Units: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, maxComputeUnits);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Number of partitions in which this device can be partitioned: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, partitionMaxSubDevices);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Device frequency (Mhz): ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, maxClockFrequency);
    dataTemp = env->NewStringUTF(" (the very small frequency is due to the almost inactivity of the device)");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Device addressing size: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, addressBits);
    dataTemp = env->NewStringUTF(" bits");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Data information memory\n");
    toString = (jstring)env->CallObjectMethod(toString, concat, nameInfo);
    nameInfo = env->NewStringUTF("Maximum memory alloc size: ");
    double memorySize = maxMemAllocSize / pow(1024, 2);
    value = (jstring)env->CallStaticObjectMethod(Double, toStringDouble, memorySize);
    dataTemp = env->NewStringUTF(" Mb");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Global memory size: ");
    memorySize = globalMemSize / pow(1024, 2);
    value = (jstring)env->CallStaticObjectMethod(Double, toStringDouble, memorySize);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Local memory size: ");
    memorySize = localMemSize / pow(1024, 1);
    if (memorySize > 1024) {
        memorySize /= 1024;
        dataTemp = env->NewStringUTF(" Mb");
    } else dataTemp = env->NewStringUTF(" Kb");
    value = (jstring)env->CallStaticObjectMethod(Double, toStringDouble, memorySize);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Local memory type: ");
    dataTemp = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, localMemType, dataTemp);
    nameInfo = env->NewStringUTF("Global cache line memory: ");
    memorySize = globalMemCachelineSize / pow(1024, 1);
    value = (jstring)env->CallStaticObjectMethod(Double, toStringDouble, memorySize);
    dataTemp = env->NewStringUTF(" Kb");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Global cache memory: ");
    memorySize = globalMemCacheSize / pow(1024, 1);
    value = (jstring)env->CallStaticObjectMethod(Double, toStringDouble, memorySize);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Global cache memory status: ");
    dataTemp = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, globalMemCacheType, dataTemp);
    nameInfo = env->NewStringUTF("opencl vectors length");
    toString = (jstring)env->CallObjectMethod(toString, concat, nameInfo);
    nameInfo = env->NewStringUTF("Preferred vector char: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, preferredVectorWidthChar);
    if (preferredVectorWidthChar == 0) dataTemp = env->NewStringUTF(" not support");
    else dataTemp = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Preferred vector short: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, preferredVectorWidthShort);
    if (preferredVectorWidthShort == 0) dataTemp = env->NewStringUTF(" not support");
    else dataTemp = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Preferred vector int: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, preferredVectorWidthInt);
    if (preferredVectorWidthInt == 0) dataTemp = env->NewStringUTF(" not support");
    else dataTemp = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Preferred vector long: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, preferredVectorWidthLong);
    if (preferredVectorWidthLong == 0) dataTemp = env->NewStringUTF(" not support");
    else dataTemp = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Preferred vector float: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, preferredVectorWidthFloat);
    if (preferredVectorWidthFloat == 0) dataTemp = env->NewStringUTF(" not support");
    else dataTemp = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Preferred vector double: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, preferredVectorWidthDouble);
    if (preferredVectorWidthDouble == 0) dataTemp = env->NewStringUTF(" not support");
    else dataTemp = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Preferred vector half: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, preferredVectorWidthHalf);
    if (preferredVectorWidthHalf == 0) dataTemp = env->NewStringUTF(" not support");
    else dataTemp = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Native vector char: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, nativeVectorWidthChar);
    if (nativeVectorWidthChar == 0) dataTemp = env->NewStringUTF(" not support");
    else dataTemp = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Native vector short: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, nativeVectorWidthShort);
    if (nativeVectorWidthShort == 0) dataTemp = env->NewStringUTF(" not support");
    else dataTemp = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Native vector int: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, nativeVectorWidthInt);
    if (nativeVectorWidthInt == 0) dataTemp = env->NewStringUTF(" not support");
    else dataTemp = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Native vector long: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, nativeVectorWidthLong);
    if (nativeVectorWidthLong == 0) dataTemp = env->NewStringUTF(" not support");
    else dataTemp = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Native vector float: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, nativeVectorWidthFloat);
    if (nativeVectorWidthFloat == 0) dataTemp = env->NewStringUTF(" not support");
    else dataTemp = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Native vector double: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, nativeVectorWidthDouble);
    if (nativeVectorWidthDouble == 0) dataTemp = env->NewStringUTF(" not support");
    else dataTemp = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Native vector half: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, nativeVectorWidthHalf);
    if (nativeVectorWidthHalf == 0) dataTemp = env->NewStringUTF(" not support");
    else dataTemp = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Data information Image\n");
    toString = (jstring)env->CallObjectMethod(toString, concat, nameInfo);
    nameInfo = env->NewStringUTF("Image support: ");
    dataTemp = env->NewStringUTF("");
    value = (jstring)env->CallStaticObjectMethod(Boolean, toStringBoolean, imageSupport);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Max read image args: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, maxReadImageArgs);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Max write image args: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, maxWriteImageArgs);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Max read write image args: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, maxReadWriteImageArgs);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Max width image2D: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, image2DMaxWidth);
    dataTemp = env->NewStringUTF(" px");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Max height image2D: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, image2DMaxHeigth);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Max width image3D: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, image3DMaxWidth);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Max height image3D: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, image3DMaxHeigth);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Max depth image3D: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, image3DMaxDepth);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Image max buffer size: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, imageMaxBufferSize);
    dataTemp = env->NewStringUTF(" px available for a vector 1D of image created from a buffer");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Image max array size: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, imageMaxArraySize);
    dataTemp = env->NewStringUTF(" max images into a 1D or 2D image array");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Image pitch alignment: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, imagePitchAlignment);
    dataTemp = env->NewStringUTF(" (row offset size in pixels for an image created from a buffer");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Image base address aligment: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, imageBaseAddressAlignment);
    dataTemp = env->NewStringUTF(" (row offset size in pixels for an image created from a buffer, which has been created with Buffer.BUFFER_USE_HOST_PTR)");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Data information buffers\n");
    toString = (jstring)env->CallObjectMethod(toString, concat, nameInfo);
    nameInfo = env->NewStringUTF("Memory base address align: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, memBaseAddressAlign);
    char *info = (char*)malloc(sizeof(char) * 150);
    strcpy(info, "bits (divide by 8 bits to get the bytes of the vector, for profile \"FULL_PROFILE\" is a long16 vector ");
    strcat(info, "and for \"EMBEDDED_PROFILE\" it is an int16 vector)");
    dataTemp = env->NewStringUTF(info);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Printf buffer size: ");
    memorySize = printfBufferSize / pow(1024, 2);
    value = (jstring)env->CallStaticObjectMethod(Double, toStringDouble, memorySize);
    dataTemp = env->NewStringUTF(" Mb");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Data information partition\n");
    toString = (jstring)env->CallObjectMethod(toString, concat, nameInfo);
    nameInfo = env->NewStringUTF("Partition properties: ");
    dataTemp = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, partitionProperties, dataTemp);
    nameInfo = env->NewStringUTF("Partition affinity domain: ");
    toString = concatString(env, toString, nameInfo, partitionAffinityDomain, dataTemp);
    nameInfo = env->NewStringUTF("Partition type: ");
    toString = concatString(env, toString, nameInfo, partitionType, dataTemp);
    nameInfo = env->NewStringUTF("Data information command queue\n");
    toString = (jstring)env->CallObjectMethod(toString, concat, nameInfo);
    nameInfo = env->NewStringUTF("Queue on host properties: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, queueOnHostProperties);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Queue properties: ");
    toString = concatString(env, toString, nameInfo, queueOnDeviceProperties, dataTemp);
    nameInfo = env->NewStringUTF("Queue preferred size: ");
    memorySize = queueOnDevicePreferredSize / pow(1024, 1);
    value = (jstring)env->CallStaticObjectMethod(Double, toStringDouble, memorySize);
    dataTemp = env->NewStringUTF(" Kb");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Queue max size: ");
    memorySize = queueOnDeviceMaxSize / pow(1024, 1);
    value = (jstring)env->CallStaticObjectMethod(Double, toStringDouble, memorySize);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Number maximum of queues: ");
    dataTemp = env->NewStringUTF("");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, maxOnDeviceQueues);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Data information pipe");
    toString = (jstring)env->CallObjectMethod(toString, concat, nameInfo);
    nameInfo = env->NewStringUTF("Maximum pipe arguments: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, maxPipeArgs);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Pipe max active reservations: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, pipeMaxActiveReservations);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Pipe max packet size: ");
    dataTemp = env->NewStringUTF(" Kb");
    memorySize = pipeMaxPacketSize / pow(1024, 1);
    value = (jstring)env->CallStaticObjectMethod(Double, toStringDouble, memorySize);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Data information kernel\n");
    toString = (jstring)env->CallObjectMethod(toString, concat, nameInfo);
    nameInfo = env->NewStringUTF("Max work item dimensions: ");
    dataTemp = env->NewStringUTF("");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, maxWorkItemDimensions);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Max work item sizes: ");
    value = (jstring)env->CallStaticObjectMethod(Arrays, toStringArrays, maxWorkItemSizes);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Max work group size: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, maxWorkGroupSize);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Max number of args declared as constant: ");
    memorySize = maxConstantBufferSize;
    value = (jstring)env->CallStaticObjectMethod(Double, toStringDouble, memorySize);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Max constant args: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, maxConstantArgs);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Global variable size: ");
    memorySize = maxGlobalVariableSize / pow(1024, 1);
    value = (jstring)env->CallStaticObjectMethod(Double, toStringDouble, memorySize);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Global variable preferred total size: ");
    memorySize = globalVariablePreferredTotalSize / pow(1024, 1);
    value = (jstring)env->CallStaticObjectMethod(Double, toStringDouble, memorySize);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Maximum number sub-groups: ");
    dataTemp = env->NewStringUTF("");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, maxNumSubGroups);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Sub group independent forward progress: ");
    value = (jstring)env->CallStaticObjectMethod(Boolean, toStringBoolean, subGroupIndependentForwardProgress);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Execution capabilities: ");
    toString = concatString(env, toString, nameInfo, executionCapabilities, dataTemp);
    nameInfo = env->NewStringUTF("Max samplers: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, maxSamplers);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Build in kernels: ");
    toString = concatString(env, toString, nameInfo, buildInKernels, dataTemp);
    nameInfo = env->NewStringUTF("Maximum parameter size: ");
    memorySize = maxParameterSize / pow(1024, 1);
    value = (jstring)env->CallStaticObjectMethod(Double, toStringDouble, memorySize);
    dataTemp = env->NewStringUTF(" Kb");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Other information\n");
    toString = (jstring)env->CallObjectMethod(toString, concat, nameInfo);
    nameInfo = env->NewStringUTF("ILVersion: ");
    dataTemp = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, ILVersion, dataTemp);
    nameInfo = env->NewStringUTF("Single fp config: ");
    toString = concatString(env, toString, nameInfo, singleFPConfig, dataTemp);
    nameInfo = env->NewStringUTF("Double fp config: ");
    toString = concatString(env, toString, nameInfo, doubleFPConfig, dataTemp);
    nameInfo = env->NewStringUTF("Is error correction support: ");
    value = (jstring)env->CallStaticObjectMethod(Boolean, toStringBoolean, errorCorrectionSupport);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Profiling timer resolution: ");
    value = (jstring)env->CallStaticObjectMethod(Long, toStringLong, profilingTimerResolution);
    dataTemp = env->NewStringUTF(" nSec");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Is endian litter support: ");
    dataTemp = env->NewStringUTF("");
    value = (jstring)env->CallStaticObjectMethod(Boolean, toStringBoolean, endianLittle);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Is device available: ");
    value = (jstring)env->CallStaticObjectMethod(Boolean, toStringBoolean, available);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Compiler available: ");
    value = (jstring)env->CallStaticObjectMethod(Boolean, toStringBoolean, compilerAvailable);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Linker available: ");
    value = (jstring)env->CallStaticObjectMethod(Boolean, toStringBoolean, linkerAvailable);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Number max events on this device: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, maxOnDeviceEvents);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Is preferred interop user sync support: ");
    value = (jstring)env->CallStaticObjectMethod(Boolean, toStringBoolean, preferredInteropUserSync);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Reference count: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, referenceCount);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Shared Virtual Memory (SVM) capabilities: ");
    toString = concatString(env, toString, nameInfo, SVMCapabilities, dataTemp);
    nameInfo = env->NewStringUTF("Preferred platform atomic alignment: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, preferredPlatformAtomicAlignment);
    dataTemp = env->NewStringUTF(" bytes");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Preferred global atomic alignment: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, preferredGlobalAtomicAlignment);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Preferred local atomic alignment: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, preferredLocalAtomicAlignment);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Platform info\n");
    value = (jstring)env->CallObjectMethod(platform, toStringPlatform);
    dataTemp = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    return toString;
}
jstring deviceTimerToString(JNIEnv *env, jobject deviceTimer) {
    jclass DeviceTimer = env->GetObjectClass(deviceTimer);
    jclass Arrays = env->FindClass("java/util/Arrays");
    jclass Long = env->FindClass("java/lang/Long");
    jmethodID getDeviceAndHostTimestamp = env->GetMethodID(DeviceTimer, "getDeviceAndHostTimestamp", "()[J");
    jmethodID getHostTimestamp = env->GetMethodID(DeviceTimer, "getHostTimestamp", "()J");
    jmethodID toStringArrays = env->GetStaticMethodID(Arrays, "toString", "([J)Ljava/lang/String;");
    jmethodID toStringLong = env->GetStaticMethodID(Long, "toString", "(J)Ljava/lang/String;");
    jstring toString = env->NewStringUTF("");
    jstring nameInfo = env->NewStringUTF("\nDeviceAndHostTimestamp: ");
    jlongArray timeStamp = (jlongArray)env->CallObjectMethod(deviceTimer, getDeviceAndHostTimestamp);
    jstring value;
    jstring dataTemp = env->NewStringUTF(" nSeg");
    if (timeStamp != NULL) value = (jstring) env->CallStaticObjectMethod(Arrays, toStringArrays, timeStamp);
    else value = env->NewStringUTF("{ 0, 0 }");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("HostTimestamp: ");
    jlong _timeStamp = env->CallLongMethod(deviceTimer, getHostTimestamp);
    value = (jstring)env->CallStaticObjectMethod(Long, toStringLong, _timeStamp);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    return toString;
}
jstring contextToString(JNIEnv *env, jobject context) {
    jclass Context = env->GetObjectClass(context);
    jclass Device = env->FindClass("com/draico/asvappra/opencl/Device");
    jclass Integer = env->FindClass("java/lang/Integer");
    jclass String = env->FindClass("java/lang/String");
    jmethodID getReferenceCount = env->GetMethodID(Context, "getReferenceCount", "()I");
    jmethodID getDevices = env->GetMethodID(Context, "getDevices", "()[Lcom/draico/asvappra/opencl/Device;");
    jmethodID toStringDevice = env->GetMethodID(Device, "toString", "()Ljava/lang/String;");
    jmethodID toStringInteger = env->GetStaticMethodID(Integer, "toString", "(I)Ljava/lang/String;");
    jmethodID concat = env->GetMethodID(String, "concat", "(Ljava/lang/String;)Ljava/lang/String;");
    jint referenceCount = env->CallIntMethod(context, getReferenceCount);
    jobjectArray devices = (jobjectArray)env->CallObjectMethod(context, getDevices);
    jint lengthDevices = env->GetArrayLength(devices);
    jstring toString;
    jstring nameInfo = env->NewStringUTF("\nData info context\n");
    jstring dataTemp = env->NewStringUTF("Reference count: ");
    jstring newLine = env->NewStringUTF("\n");
    jstring value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, referenceCount);
    toString = nameInfo;
    toString = (jstring)env->CallObjectMethod(toString, concat, dataTemp);
    toString = (jstring)env->CallObjectMethod(toString, concat, value);
    toString = (jstring)env->CallObjectMethod(toString, concat, newLine);
    for (jint position = 0; position < lengthDevices; position++) {
        jobject device = env->GetObjectArrayElement(devices, position);
        nameInfo = env->NewStringUTF("Data info device\n");
        value = (jstring)env->CallObjectMethod(device, toStringDevice);
        toString = (jstring)env->CallObjectMethod(toString, concat, nameInfo);
        toString = (jstring)env->CallObjectMethod(toString, concat, value);
        toString = (jstring)env->CallObjectMethod(toString, concat, newLine);
    }
    return toString;
}
jstring commandQueueToString(JNIEnv *env, jobject commandQueue) {
    jclass CommandQueue = env->GetObjectClass(commandQueue);
    jclass Context = env->FindClass("com/draico/asvappra/opencl/Context");
    jclass Device = env->FindClass("com/draico/asvappra/opencl/Device");
    jclass Integer = env->FindClass("java/lang/Integer");
    jclass String = env->FindClass("java/lang/String");
    jmethodID getContext = env->GetMethodID(CommandQueue, "getContext", "()Lcom/draico/asvappra/opencl/Context;");
    jmethodID getDevice = env->GetMethodID(CommandQueue, "getDevice", "()Lcom/draico/asvappra/opencl/Device;");
    jmethodID getReferenceCount = env->GetMethodID(CommandQueue, "getReferenceCount", "()I");
    jmethodID toStringContext = env->GetMethodID(Context, "toString", "()Ljava/lang/String;");
    jmethodID toStringDevice = env->GetMethodID(Device, "toString", "()Ljava/lang/String;");
    jmethodID toStringInteger = env->GetStaticMethodID(Integer, "toString", "(I)Ljava/lang/String;");
    jmethodID concat = env->GetMethodID(String, "concat", "(Ljava/lang/String;)Ljava/lang/String;");
    jstring toString;
    jstring nameInfo = env->NewStringUTF("\nReference count: ");
    jint referenceCount = env->CallIntMethod(commandQueue, getReferenceCount);
    jstring value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, referenceCount);
    jstring newLine = env->NewStringUTF("\n");
    toString = nameInfo;
    toString = (jstring)env->CallObjectMethod(toString, concat, value);
    toString = (jstring)env->CallObjectMethod(toString, concat, newLine);
    jobject context = env->CallObjectMethod(commandQueue, getContext);
    jobject device = env->CallObjectMethod(commandQueue, getDevice);
    nameInfo = env->NewStringUTF("Information device\n");
    jstring dataTemp = (jstring)env->CallObjectMethod(device, toStringDevice);
    toString = (jstring)env->CallObjectMethod(toString, concat, nameInfo);
    toString = (jstring)env->CallObjectMethod(toString, concat, dataTemp);
    toString = (jstring)env->CallObjectMethod(toString, concat, newLine);
    nameInfo = env->NewStringUTF("Information context");
    dataTemp = (jstring)env->CallObjectMethod(context, toStringContext);
    toString = (jstring)env->CallObjectMethod(toString, concat, nameInfo);
    toString = (jstring)env->CallObjectMethod(toString, concat, dataTemp);
    toString = (jstring)env->CallObjectMethod(toString, concat, newLine);
    return toString;
}
jstring memoryToString(JNIEnv *env, jobject memory) {
    jclass Memory = env->GetObjectClass(memory);
    jclass Double = env->FindClass("java/lang/Double");
    jclass Integer = env->FindClass("java/lang/Integer");
    jmethodID toStringDouble = env->GetStaticMethodID(Double, "toString", "(D)Ljava/lang/String;");
    jmethodID toStringInteger = env->GetStaticMethodID(Integer, "toString", "(I)Ljava/lang/String;");
    jfieldID currentMemory = env->GetFieldID(Memory, "currentMemory", "I");
    jfieldID sizeBlockMemory = env->GetFieldID(Memory, "sizeBlockMemory", "I");
    jint _currentMemory = env->GetIntField(memory, currentMemory);
    jint _sizeBlockMemory = env->GetIntField(memory, sizeBlockMemory);
    jdouble memorySize = _sizeBlockMemory / pow(1024, 1);
    jstring toString = env->NewStringUTF("\nMemory block info\n");
    jstring nameInfo = env->NewStringUTF("BlockNumber: ");
    jstring value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, _currentMemory);
    jstring dataTemp = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("size: ");
    if (memorySize > 1024) {
        memorySize /= 1024;
        dataTemp = env->NewStringUTF(" Mb");
    } else dataTemp = env->NewStringUTF(" Kb");
    value = (jstring)env->CallStaticObjectMethod(Double, toStringDouble, memorySize);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    return toString;
}
jstring bufferToString(JNIEnv *env, jobject buffer) {
    jclass Buffer = env->GetObjectClass(buffer);
    jclass Context = env->FindClass("com/draico/asvappra/opencl/Context");
    jclass Integer = env->FindClass("java/lang/Integer");
    jclass Memory = env->FindClass("com/draico/asvappra/opencl/memory/Memory");
    jmethodID toStringContext = env->GetMethodID(Context, "toString", "()Ljava/lang/String;");
    jmethodID toStringInteger = env->GetStaticMethodID(Integer, "toString", "(I)Ljava/lang/String;");
    jmethodID toStringMemory = env->GetMethodID(Memory, "toString", "()Ljava/lang/String;");
    jfieldID currentBuffer = env->GetFieldID(Buffer, "currentBuffer", "I");
    jfieldID bufferData = env->GetFieldID(Buffer, "bufferData", "Lcom/draico/asvappra/opencl/memory/Memory;");
    jfieldID currentContext = env->GetFieldID(Buffer, "currentContext", "Lcom/draico/asvappra/opencl/Context;");
    jint _currentBuffer = env->GetIntField(buffer, currentBuffer);
    jobject _bufferData = env->GetObjectField(buffer, bufferData);
    jobject _currentContext = env->GetObjectField(buffer, currentContext);
    jstring toString = env->NewStringUTF("\nBuffer info\n");
    jstring nameInfo = env->NewStringUTF("Buffer: ");
    jstring dataTemp = env->NewStringUTF("");
    jstring value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, _currentBuffer);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = (jstring)env->CallObjectMethod(_bufferData, toStringMemory);
    value = (jstring)env->CallObjectMethod(_currentContext, toStringContext);
    dataTemp = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    return toString;
}
jstring eventToString(JNIEnv *env, jobject event) {
    jclass Event = env->GetObjectClass(event);
    jclass Long = env->FindClass("java/lang/Long");
    jmethodID getCommandType = env->GetMethodID(Event, "getCommandType", "()I");
    jmethodID getExecutionStatus = env->GetMethodID(Event, "getExecutionStatus", "()I");
    jmethodID getProfilingCommandQueue = env->GetMethodID(Event, "getProfilingCommandQueue", "()J");
    jmethodID getProfilingCommandSubmit = env->GetMethodID(Event, "getProfilingCommandSubmit", "()J");
    jmethodID getProfilingCommantStart = env->GetMethodID(Event, "getProfilingCommantStart", "()J");
    jmethodID getProfilingCommandEnd = env->GetMethodID(Event, "getProfilingCommandEnd", "()J");
    jmethodID getProfilingCommandComplete = env->GetMethodID(Event, "getProfilingCommandComplete", "()J");
    jmethodID toStringLong = env->GetStaticMethodID(Long, "toString", "(J)Ljava/lang/String;");
    jint commandType = env->CallIntMethod(event, getCommandType);
    jint executionStatus = env->CallIntMethod(event, getExecutionStatus);
    jlong profilingCommandQueue = env->CallLongMethod(event, getProfilingCommandQueue);
    jlong profilingCommandSubmit = env->CallLongMethod(event, getProfilingCommandSubmit);
    jlong profilingCommandStart = env->CallLongMethod(event, getProfilingCommantStart);
    jlong profilingCommandEnd = env->CallLongMethod(event, getProfilingCommandEnd);
    jlong profilingCommandComplete = env->CallLongMethod(event, getProfilingCommandComplete);
    jstring dataTemp;
    jstring nameInfo;
    jstring toString = env->NewStringUTF("\nData info event\n");
    nameInfo = env->NewStringUTF("Command type: ");
    jstring value;
    switch(commandType) {
        case 0x11F0: value = env->NewStringUTF("NDRANGE KERNEL"); break;
        case 0x11F1: value = env->NewStringUTF("TASK"); break;
        case 0x11F2: value = env->NewStringUTF("NATIVE KERNEL"); break;
        case 0x11F3: value = env->NewStringUTF("READ BUFFER"); break;
        case 0x11F4: value = env->NewStringUTF("WRITE BUFFER"); break;
        case 0x11F5: value = env->NewStringUTF("COPY BUFFER"); break;
        case 0x11F6: value = env->NewStringUTF("READ IMAGE"); break;
        case 0x11F7: value = env->NewStringUTF("WRITE IMAGE"); break;
        case 0x11F8: value = env->NewStringUTF("COPY IMAGE"); break;
        case 0x11F9: value = env->NewStringUTF("COPY IMAGE TO BUFFER"); break;
        case 0x11FA: value = env->NewStringUTF("COPY BUFFER TO IMAGE"); break;
        case 0x11FB: value = env->NewStringUTF("MAP BUFFER"); break;
        case 0x11FC: value = env->NewStringUTF("MAP IMAGE"); break;
        case 0x11FD: value = env->NewStringUTF("UNMAP MEMORY OBJECT"); break;
        case 0x11FE: value = env->NewStringUTF("MARKER"); break;
        case 0x11FF: value = env->NewStringUTF("ACQUIRE GL OBJECTS"); break;
        case 0x1200: value = env->NewStringUTF("RELEASE GL OBJECTS"); break;
        case 0x1201: value = env->NewStringUTF("READ BUFFER RECT"); break;
        case 0x1202: value = env->NewStringUTF("WRITE BUFFER RECT"); break;
        case 0x1203: value = env->NewStringUTF("COPY BUFFER RECT"); break;
        case 0x1204: value = env->NewStringUTF("USER"); break;
        case 0x1205: value = env->NewStringUTF("BARRIER"); break;
        case 0x1206: value = env->NewStringUTF("MIRATE MEMORY OBJECTS"); break;
        case 0x1207: value = env->NewStringUTF("FILL BUFFER"); break;
        case 0x1208: value = env->NewStringUTF("FILL IMAGE"); break;
        case 0x1209: value = env->NewStringUTF("SVM (SHARE VIRTUAL MEMORY) FREE"); break;
        case 0x120A: value = env->NewStringUTF("SVM (SHARE VIRTUAL MEMORY) MEMORY COPY"); break;
        case 0x120B: value = env->NewStringUTF("SVM (SHARE VIRTUAL MEMORY) MEMORY FILL"); break;
        case 0x120C: value = env->NewStringUTF("SVM (SHARE VIRTUAL MEMORY) MAP"); break;
        case 0x120D: value = env->NewStringUTF("SVM (SHARE VIRTUAL MEMORY) UNMAP"); break;
        default: value = env->NewStringUTF("None");
    }
    dataTemp = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Execution status: ");
    switch(executionStatus) {
        case 0: value = env->NewStringUTF("COMPLETE"); break;
        case 1: value = env->NewStringUTF("RUNNING"); break;
        case 2: value = env->NewStringUTF("SUBMITED"); break;
        case 3: value = env->NewStringUTF("QUEUED"); break;
        default: value = env->NewStringUTF("WAIT"); break;
    }
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Profiling CommandQueue: ");
    dataTemp = env->NewStringUTF(" nSec");
    value = (jstring)env->CallStaticObjectMethod(Long, toStringLong, profilingCommandQueue);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Profiling CommandSubmit: ");
    value = (jstring)env->CallStaticObjectMethod(Long, toStringLong, profilingCommandSubmit);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Profiling CommandStart: ");
    value = (jstring)env->CallStaticObjectMethod(Long, toStringLong, profilingCommandStart);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Profiling CommandEnd: ");
    value = (jstring)env->CallStaticObjectMethod(Long, toStringLong, profilingCommandEnd);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Profiling CommmandComplete: ");
    value = (jstring)env->CallStaticObjectMethod(Long, toStringLong, profilingCommandComplete);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    return toString;
}
jstring imageFormatToString(JNIEnv *env, jobject imageFormat) {
    jclass ImageFormat = env->GetObjectClass(imageFormat);
    jclass Object = env->FindClass("java/lang/Object");
    jfieldID context = env->GetFieldID(ImageFormat, "context", "Lcom/draico/asvappra/opencl/Context;");
    jfieldID imageChannelOrder = env->GetFieldID(ImageFormat, "imageChannelOrder", "I");
    jfieldID imageChannelDataType = env->GetFieldID(ImageFormat, "imageChannelDataType", "I");
    jmethodID getSupportedImageFormats = env->GetStaticMethodID(ImageFormat, "getSupportedImageFormats", "(Lcom/draico/asvappra/opencl/Context;II)[Lcom/draico/asvappra/opencl/image/ImageFormat;");
    jobject _context = env->GetObjectField(imageFormat, context);
    jint _imageChannelOrder = env->GetIntField(imageFormat, imageChannelOrder);
    jint _imageChannelDataType = env->GetIntField(imageFormat, imageChannelDataType);
    jint imageType[] = { 0x10F4, 0x10F5, 0x10F6, 0x10F1, 0x10F3, 0x10F2 };
    jint typeAccessImage[] = { 1 << 0, 1 << 1, 1 << 2 };
    jobjectArray dataImageFormat = env->NewObjectArray(3, Object, NULL);
    for (jint position1 = 0; position1 < 3; position1++) {
        jint typeAccess = typeAccessImage[position1];
        jobjectArray dataImageFormatByTypeAccess = env->NewObjectArray(6, Object, NULL);
        for (jint position2 = 0; position2 < 6; position2++) {
            jint _imageType = imageType[position2];
            jobjectArray imageFormatArray = (jobjectArray)env->CallStaticObjectMethod(ImageFormat, getSupportedImageFormats, _context, typeAccess, _imageType);
            env->SetObjectArrayElement(dataImageFormatByTypeAccess, position2, imageFormatArray);
        }
        env->SetObjectArrayElement(dataImageFormat, position1, dataImageFormatByTypeAccess);
    }
    jstring toString = env->NewStringUTF("");
    jstring nameInfo = env->NewStringUTF("ImageFormat:\n");
    jstring value = env->NewStringUTF("ImageChannelOrder: ");
    jstring dataTemp = getNameImageChannelOrder(env, _imageChannelOrder);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("ImageChannelDataType: ");
    value = getNameImageChannelDataType(env, _imageChannelDataType);
    dataTemp = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("List of image format support on this device");
    toString = concatString(env, toString, nameInfo, dataTemp, dataTemp);
    for (jint position1 = 0; position1 < 3; position1++) {
        nameInfo = env->NewStringUTF("Type of image access: ");
        switch(position1) {
            case 0: value = env->NewStringUTF("Image.IMAGE_READ_WRITE"); break;
            case 1: value = env->NewStringUTF("Image.IMAGE_WRITE_ONLY"); break;
            case 2: value = env->NewStringUTF("Image.IMAGE_READ_ONLY"); break;
        }
        toString = concatString(env, toString, nameInfo, value, dataTemp);
        jobject listDataTypeAccess = env->GetObjectArrayElement(dataImageFormat, position1);
        if (listDataTypeAccess != NULL) {
            jobjectArray listTypeAccess = (jobjectArray)listDataTypeAccess;
            for (jint position2 = 0; position2 < 6; position2++) {
                nameInfo = env->NewStringUTF("Type of image: ");
                switch(position2) {
                    case 0: value = env->NewStringUTF("ImageDescriptor.TYPE_IMAGE1D"); break;
                    case 1: value = env->NewStringUTF("ImageDescriptor.TYPE_IMAGE1D_ARRAY"); break;
                    case 2: value = env->NewStringUTF("ImageDescriptor.TYPE_IMAGE1D_BUFFER"); break;
                    case 3: value = env->NewStringUTF("ImageDescriptor.TYPE_IMAGE2D"); break;
                    case 4: value = env->NewStringUTF("ImageDescriptor.TYPE_IMAGE2D_ARRAY"); break;
                    case 5: value = env->NewStringUTF("ImageDescriptor.TYPE_IMAGE3D"); break;
                }
                toString = concatString(env, toString, nameInfo, value, dataTemp);
                jobject listData = env->GetObjectArrayElement(listTypeAccess, position2);
                if (listData != NULL) {
                    jobjectArray listImageFormats = (jobjectArray)listData;
                    jsize sizeListImageFormats = env->GetArrayLength(listImageFormats);
                    for (jint position3 = 0; position3 < sizeListImageFormats; position3++) {
                        jobject _imageFormat = env->GetObjectArrayElement(listImageFormats, position3);
                        _imageChannelOrder = env->GetIntField(_imageFormat, imageChannelOrder);
                        _imageChannelDataType = env->GetIntField(_imageFormat, imageChannelDataType);
                        nameInfo = env->NewStringUTF("Image channel order: ");
                        value = getNameImageChannelOrder(env, _imageChannelOrder);
                        toString = concatString(env, toString, nameInfo, value, dataTemp);
                        nameInfo = env->NewStringUTF("Image channel data type: ");
                        value = getNameImageChannelDataType(env, _imageChannelDataType);
                        toString = concatString(env, toString, nameInfo, value, dataTemp);
                    }
                } else toString = concatString(env, toString, env->NewStringUTF("null"), dataTemp, dataTemp);
            }
        } else toString = concatString(env, toString, env->NewStringUTF("null"), dataTemp, dataTemp);
    }
    return toString;
}
jstring imageDescriptorToString(JNIEnv *env, jobject imageDescriptor) {
    jclass ImageDescriptor = env->GetObjectClass(imageDescriptor);
    jclass Integer = env->FindClass("java/lang/Integer");
    jmethodID toStringInteger = env->GetStaticMethodID(Integer, "toString", "(I)Ljava/lang/String;");
    jfieldID currentImageDescriptor = env->GetFieldID(ImageDescriptor, "currentImageDescriptor", "I");
    jint _currentImageDescriptor = env->GetIntField(imageDescriptor, currentImageDescriptor);
    getDataImageDescriptorSelected(_currentImageDescriptor);
    jstring nameInfo = env->NewStringUTF("ImageDescritptor\nType image: ");
    jstring value = env->NewStringUTF("");
    switch(*(jint*)dataImageDescriptor[0]) {
        case 0x10F1: value = env->NewStringUTF("ImageDescriptor.TYPE_IMAGE2D"); break;
        case 0x10F2: value = env->NewStringUTF("ImageDescriptor.TYPE_IMAGE3D"); break;
        case 0x10F3: value = env->NewStringUTF("ImageDescriptor.TYPE_IMAGE2D_ARRAY"); break;
        case 0x10F4: value = env->NewStringUTF("ImageDescriptor.TYPE_IMAGE1D"); break;
        case 0x10F5: value = env->NewStringUTF("ImageDescriptor.TYPE_IMAGE1D_ARRAY"); break;
        case 0x10F6: value = env->NewStringUTF("ImageDescriptor.TYPE_IMAGE1D_BUFFER"); break;
    }
    jstring dataTemp = env->NewStringUTF("");
    jstring toString = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("width: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, *(jint*)dataImageDescriptor[1]);
    dataTemp = env->NewStringUTF(" px");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("height: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, *(jint*)dataImageDescriptor[2]);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("depth: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, *(jint*)dataImageDescriptor[3]);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("numberImages: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, *(jint*)dataImageDescriptor[4]);
    dataTemp = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("numberBytesPerRow: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, *(jint*)dataImageDescriptor[5]);
    dataTemp = env->NewStringUTF(" bytes");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("numberBytesPerLayer: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, *(jint*)dataImageDescriptor[6]);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("num_mip_leves: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, *(jint*)dataImageDescriptor[7]);
    dataTemp = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("num_samples: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, *(jint*)dataImageDescriptor[8]);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    return toString;
}
jstring imageToString(JNIEnv *env, jobject image) {
    jclass Image = env->GetObjectClass(image);
    jfieldID imageFormat = env->GetFieldID(Image, "imageFormat", "Lcom/draico/asvappra/opencl/image/ImageFormat;");
    jfieldID imageDescriptor = env->GetFieldID(Image, "imageDescriptor", "Lcom/draico/asvappra/opencl/image/ImageDescriptor;");
    jobject _imageFormat = env->GetObjectField(image, imageFormat);
    jobject _imageDescriptor = env->GetObjectField(image, imageDescriptor);
    jclass ImageFormat = env->GetObjectClass(_imageFormat);
    jclass ImageDescriptor = env->GetObjectClass(_imageDescriptor);
    jclass Integer = env->FindClass("java/lang/Integer");
    jmethodID getSizePixel = env->GetMethodID(Image, "getSizePixel", "()I");
    jmethodID toStringImageFormat = env->GetMethodID(ImageFormat, "toString", "()Ljava/lang/String;");
    jmethodID toStringImageDescriptor = env->GetMethodID(ImageDescriptor, "toString", "()Ljava/lang/String;");
    jmethodID toStringInteger = env->GetStaticMethodID(Integer, "toString", "(I)Ljava/lang/String;");
    jstring nameInfo = env->NewStringUTF("Image\nsize per pixel: ");
    jint sizePixel = env->CallIntMethod(image, getSizePixel);
    jstring value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, sizePixel);
    jstring dataTemp = env->NewStringUTF(" bytes");
    jstring toString = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = (jstring)env->CallObjectMethod(_imageFormat, toStringImageFormat);
    value = env->NewStringUTF("");
    dataTemp = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = (jstring)env->CallObjectMethod(_imageDescriptor, toStringImageDescriptor);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    return toString;
}
jstring pipeToString(JNIEnv *env, jobject pipe) {
    jclass Pipe = env->GetObjectClass(pipe);
    jclass Integer = env->FindClass("java/lang/Integer");
    jmethodID toStringInteger = env->GetStaticMethodID(Integer, "toString", "(I)Ljava/lang/String;");
    jfieldID packetSize = env->GetFieldID(Pipe, "packetSize", "I");
    jfieldID numberPackets = env->GetFieldID(Pipe, "numberPackets", "I");
    jint _packetSize = env->GetIntField(pipe, packetSize);
    jint _numberPackets = env->GetIntField(pipe, numberPackets);
    jstring nameInfo = env->NewStringUTF("Pipe Info\npackeSize: ");
    jstring value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, _packetSize);
    jstring dataTemp = env->NewStringUTF(" bytes");
    jstring toString = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("number of packets: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, _numberPackets);
    dataTemp = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    return toString;
}
jstring sampleToString(JNIEnv *env, jobject sample) {
    jclass Sample = env->GetObjectClass(sample);
    jfieldID addressingMode = env->GetFieldID(Sample, "addressingMode", "I");
    jfieldID filterMode = env->GetFieldID(Sample, "filterMode", "I");
    jint _addressingMode = env->GetIntField(sample, addressingMode);
    jint _filterMode = env->GetIntField(sample, filterMode);
    jstring nameInfo = env->NewStringUTF("Sample info\naddressing mode: ");
    jstring value;
    switch(_addressingMode) {
        case 0x1130: value = env->NewStringUTF("Sample.ADDRESS_NONE"); break;
        case 0x1131: value = env->NewStringUTF("Sample.ADDRESS_CLAMP_TO_EDGE"); break;
        case 0x1132: value = env->NewStringUTF("Sample.ADDRESS_CLAMP"); break;
        case 0x1133: value = env->NewStringUTF("Sample.ADDRESS_REPEAT"); break;
        case 0x1134: value = env->NewStringUTF("Sample.ADDRESS_MIRRORED_REPEAT"); break;
    }
    jstring dataTemp = env->NewStringUTF("");
    jstring toString = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("filter mode: ");
    switch(_filterMode) {
        case 0x1140: value = env->NewStringUTF("Sample.FILTER_NEAREST"); break;
        case 0x1141: value = env->NewStringUTF("Sample.FILTER_LINEAR"); break;
    }
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    return toString;
}
jstring programToString(JNIEnv *env, jobject program) {
    jvm->AttachCurrentThread(&env, NULL);
    jclass Program = env->GetObjectClass(program);
    jclass Boolean = env->FindClass("java/lang/Boolean");
    jclass Integer = env->FindClass("java/lang/Integer");
    jmethodID toStringBoolean = env->GetStaticMethodID(Boolean, "toString", "(Z)Ljava/lang/String;");
    jmethodID toStringInteger = env->GetStaticMethodID(Integer, "toString", "(I)Ljava/lang/String;");
    jmethodID getFilesProgramSource = env->GetMethodID(Program, "getFilesProgramSource", "()Ljava/lang/String;");
    jmethodID getProgramIL = env->GetMethodID(Program, "getProgramIL", "()Ljava/lang/String;");
    jmethodID getSizeFileProgramBinaries = env->GetMethodID(Program, "getSizeFileProgramBinaries", "()[I");
    jmethodID getNumberKernels = env->GetMethodID(Program, "getNumberKernels", "()I");
    jmethodID getProgramKernelName = env->GetMethodID(Program, "getProgramKernelName", "()[Ljava/lang/String;");
    jmethodID isScopeGlobalConstructorsPresent = env->GetMethodID(Program, "isScopeGlobalConstructorsPresent", "()Z");
    jmethodID isScopeGlobalDestructorsPresent = env->GetMethodID(Program, "isScopeGlobalDestructorsPresent", "()Z");
    jmethodID getBuildStatus = env->GetMethodID(Program, "getBuildStatus", "()Ljava/lang/String;");
    jmethodID getBuildOptions = env->GetMethodID(Program, "getBuildOptions", "()Ljava/lang/String;");
    jmethodID getBuildLog = env->GetMethodID(Program, "getBuildLog", "()Ljava/lang/String;");
    jmethodID getBinaryType = env->GetMethodID(Program, "getBinaryType", "()Ljava/lang/String;");
    jmethodID getSize = env->GetMethodID(Program, "getSize", "()[I");
    jobject filesProgramSource = env->CallObjectMethod(program, getFilesProgramSource);
    jobject programIL = env->CallObjectMethod(program, getProgramIL);
    jobject sizeFileProgramBinaries = env->CallObjectMethod(program, getSizeFileProgramBinaries);
    jint numberKernels = env->CallIntMethod(program, getNumberKernels);
    jobject programKernelName = env->CallObjectMethod(program, getProgramKernelName);
    jboolean _isScopeGlobalConstructorsPresent = env->CallBooleanMethod(program, isScopeGlobalConstructorsPresent);
    jboolean _isScopeGlobalDestructorsPresent = env->CallBooleanMethod(program, isScopeGlobalDestructorsPresent);
    jobject _buildStatus = env->CallObjectMethod(program, getBuildStatus);
    jobject buildOptions = env->CallObjectMethod(program, getBuildOptions);
    jobject buildLog = env->CallObjectMethod(program, getBuildLog);
    jobject binaryType = env->CallObjectMethod(program, getBinaryType);
    jobject sizePrograms = env->CallObjectMethod(program, getSize);
    jstring toString = env->NewStringUTF("");
    jstring nameInfo = env->NewStringUTF("Program information:\nFiles program source:\n");
    jstring dataTemp = env->NewStringUTF("");
    jstring value;
    if (filesProgramSource == NULL) value = env->NewStringUTF("null");
    else value = (jstring)filesProgramSource;
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("ProgramIL:\n");
    if (programIL == NULL) value = env->NewStringUTF("null");
    else value = (jstring)programIL;
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("size files program binaries:");
    if (sizeFileProgramBinaries != NULL) {
        toString = concatString(env, toString, nameInfo, env->NewStringUTF(""), env->NewStringUTF(""));
        dataTemp = env->NewStringUTF(" bytes ");
        jsize sizeListFiles = env->GetArrayLength((jintArray)sizeFileProgramBinaries);
        jint *listValueSizeFilesProgramBinaries = env->GetIntArrayElements((jintArray)sizeFileProgramBinaries, NULL);
        for (jint position = 0; position < sizeListFiles; position++) {
            value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, listValueSizeFilesProgramBinaries[position]);
            toString = concatString(env, toString, env->NewStringUTF(""), value, dataTemp);
        }
    } else {
        value = env->NewStringUTF(" null");
        toString = concatString(env, toString, nameInfo, value, dataTemp);
    }
    nameInfo = env->NewStringUTF("Number kernels: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, numberKernels);
    dataTemp = env->NewStringUTF("");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Kernels name:\n");
    if (programKernelName == NULL) value = env->NewStringUTF("null");
    else {
        jclass String = env->FindClass("java/lang/String");
        jmethodID concat = env->GetMethodID(String, "concat", "(Ljava/lang/String;)Ljava/lang/String;");
        jobjectArray _programKernelName = (jobjectArray)programKernelName;
        jsize sizeListProgramKernelName = env->GetArrayLength(_programKernelName);
        if (sizeListProgramKernelName > 0) {
            value = env->NewStringUTF("");
            for (jint position = 0; position < sizeListProgramKernelName; position++) {
                jstring kernelName = (jstring)env->GetObjectArrayElement(_programKernelName, position);
                value = (jstring)env->CallObjectMethod(value, concat, kernelName);
                if (position < (sizeListProgramKernelName - 1)) value = (jstring)env->CallObjectMethod(value, concat, env->NewStringUTF("\n"));
            }
        } else value = env->NewStringUTF("null");
    }
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Contains non-trivial constructors: ");
    value = (jstring)env->CallStaticObjectMethod(Boolean, toStringBoolean, _isScopeGlobalConstructorsPresent);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Contains non-trivial destructors: ");
    value = (jstring)env->CallStaticObjectMethod(Boolean, toStringBoolean, _isScopeGlobalDestructorsPresent);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Build status:\n");
    if (_buildStatus == NULL) value = env->NewStringUTF("null");
    else value = (jstring)_buildStatus;
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Build options:\n");
    if (buildOptions == NULL) value = env->NewStringUTF("null");
    else value = (jstring)buildOptions;
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Build log:\n");
    if (buildLog == NULL) value = env->NewStringUTF("null");
    else value = (jstring)buildLog;
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Binary type:\n");
    if (binaryType == NULL) value = env->NewStringUTF("null");
    else value = (jstring)binaryType;
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Size programs:\n");
    if (sizePrograms != NULL) {
        toString = concatString(env, toString, nameInfo, dataTemp, dataTemp);
        jsize sizeList = env->GetArrayLength((jintArray)sizePrograms);
        if (sizeList > 0) {
            jint *listSizePrograms = env->GetIntArrayElements((jintArray)sizePrograms, NULL);
            nameInfo = env->NewStringUTF("");
            dataTemp = env->NewStringUTF(" bytes");
            for (jint position = 0; position < sizeList; position++) {
                value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, listSizePrograms[position]);
                toString = concatString(env, toString, nameInfo, value, dataTemp);
            }
        } else value = env->NewStringUTF("null");
    } else value = env->NewStringUTF(" null");
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    return toString;
}
jstring kernelToString(JNIEnv *env, jobject kernel) {
    jclass Kernel = env->GetObjectClass(kernel);
    jmethodID getFunctionName = env->GetMethodID(Kernel, "getFunctionName", "()Ljava/lang/String;");
    jmethodID getNumberArguments = env->GetMethodID(Kernel, "getNumberArguments", "()I");
    jmethodID getAttributes = env->GetMethodID(Kernel, "getAtributes", "()Ljava/lang/String;");
    jmethodID getGlobalWorkSize = env->GetMethodID(Kernel, "getGlobalWorkSize", "(Lcom/draico/asvappra/opencl/Device;)[I");
    jmethodID getWorkGroupSize = env->GetMethodID(Kernel, "getWorkGroupSize", "(Lcom/draico/asvappra/opencl/Device;)I");
    jmethodID getCompileWorkGroupSize = env->GetMethodID(Kernel, "getCompileWorkGroupSize", "(Lcom/draico/asvappra/opencl/Device;)[I");
    jmethodID getLocalMemorySize = env->GetMethodID(Kernel, "getLocalMemorySize", "(Lcom/draico/asvappra/opencl/Device;)J");
    jmethodID getPreferredWorkSizeMultiple = env->GetMethodID(Kernel, "getPreferredWorkSizeMultiple", "(Lcom/draico/asvappra/opencl/Device;)I");
    jmethodID getPrivateMemorySize = env->GetMethodID(Kernel, "getPrivateMemorySize", "(Lcom/draico/asvappra/opencl/Device;)J");
    jmethodID getMaxNumberSubGroups = env->GetMethodID(Kernel, "getMaxNumberSubGroups", "(Lcom/draico/asvappra/opencl/Device;)I");
    jmethodID getCompileNumSubGroups = env->GetMethodID(Kernel, "getCompileNumSubGroups", "(Lcom/draico/asvappra/opencl/Device;)I");
    jmethodID getArgumentAddressQualifier = env->GetMethodID(Kernel, "getArgumentAddressQualifier", "()Ljava/lang/String;");
    jmethodID getArgumentAccessQualifier = env->GetMethodID(Kernel, "getArgumentAccessQualifier", "()Ljava/lang/String;");
    jmethodID getArgumentTypeName = env->GetMethodID(Kernel, "getArgumentTypeName", "()Ljava/lang/String;");
    jmethodID getArgumentTypeQualifier = env->GetMethodID(Kernel, "getArgumentTypeQualifier", "()Ljava/lang/String;");
    jmethodID getName = env->GetMethodID(Kernel, "getName", "()Ljava/lang/String;");
    jfieldID program = env->GetFieldID(Kernel, "program", "Lcom/draico/asvappra/opencl/Program;");
    jobject _program = env->GetObjectField(kernel, program);
    jclass Program = env->GetObjectClass(_program);
    jfieldID devices = env->GetFieldID(Program, "devices", "[Lcom/draico/asvappra/opencl/Device;");
    jfieldID isBuildProgram = env->GetFieldID(Program, "isBuildProgram", "Z");
    jfieldID isCompileProgram = env->GetFieldID(Program, "isCompileProgram", "Z");
    jfieldID isLinkedProgram = env->GetFieldID(Program, "isLinkedProgram", "Z");
    jboolean _isBuildProgram = env->GetBooleanField(_program, isBuildProgram);
    jboolean _isCompileProgram = env->GetBooleanField(_program, isCompileProgram);
    jboolean _isLinkedProgram = env->GetBooleanField(_program, isLinkedProgram);
    if (!_isBuildProgram && !_isCompileProgram && !_isLinkedProgram) {
        char *message = (char*)malloc(sizeof(char) * 175);
        strcpy(message, "You cannot use the kernel toString method you are using because this kernel was created with a Program object which was created ");
        strcat(message, "with the createProgramWithBuiltInKernels method");
        showMessageError(env, message);
        return NULL;
    }
    jobjectArray _devices = (jobjectArray)env->GetObjectField(_program, devices);
    jsize sizeListDevices = env->GetArrayLength(_devices);
    jstring functionName = (jstring)env->CallObjectMethod(kernel, getFunctionName);
    jint numberArguments = env->CallIntMethod(kernel, getNumberArguments);
    jstring attributes = (jstring)env->CallObjectMethod(kernel, getAttributes);
    jclass Arrays = env->FindClass("java/util/Arrays");
    jclass Integer = env->FindClass("java/lang/Integer");
    jclass Long = env->FindClass("java/lang/Long");
    jmethodID toStringInteger = env->GetStaticMethodID(Integer, "toString", "(I)Ljava/lang/String;");
    jmethodID toStringArrayInt = env->GetStaticMethodID(Arrays, "toString", "([I)Ljava/lang/String;");
    jmethodID toStringLong = env->GetStaticMethodID(Long, "toString", "(J)Ljava/lang/String;");
    jstring toString = env->NewStringUTF("Kernel information\n");
    jstring nameInfo = env->NewStringUTF("FunctionName: ");
    jstring dataTemp = env->NewStringUTF("");
    jstring value;
    jstring dataExtra;
    toString = concatString(env, toString, nameInfo, functionName, dataTemp);
    nameInfo = env->NewStringUTF("Number arguments: ");
    value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, numberArguments);
    toString = concatString(env, toString, nameInfo, value, dataTemp);
    nameInfo = env->NewStringUTF("Attributes: ");
    toString = concatString(env, toString, nameInfo, attributes, dataTemp);
    nameInfo = env->NewStringUTF("Device");
    for (jint position = 0; position < sizeListDevices; position++) {
        jobject device = env->GetObjectArrayElement(_devices, position);
        jintArray dataGlobalWorkSize = (jintArray)env->CallObjectMethod(kernel, getGlobalWorkSize, device);
        jintArray dataCompileWorkGroupSize = (jintArray)env->CallObjectMethod(kernel, getCompileWorkGroupSize, device);
        jint dataWorkGroupSize = env->CallIntMethod(kernel, getWorkGroupSize, device);
        jlong dataLocalMemorySize = env->CallLongMethod(kernel, getLocalMemorySize, device);
        jint dataPreferredWorkSizeMultiple = env->CallIntMethod(kernel, getPreferredWorkSizeMultiple, device);
        jlong dataPrivateMemorySize = env->CallLongMethod(kernel, getPrivateMemorySize, device);
        jint dataMaxNumberSubGroups = env->CallIntMethod(kernel, getMaxNumberSubGroups, device);
        jint dataCompileNumSubGroups = env->CallIntMethod(kernel, getCompileNumSubGroups, device);
        value = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, position);
        dataTemp = env->NewStringUTF(": Global work size ");
        dataExtra = (jstring)env->CallStaticObjectMethod(Arrays, toStringArrayInt, dataGlobalWorkSize);
        toString = concatString2(env, toString, nameInfo, value, dataTemp, dataExtra);
        dataTemp = env->NewStringUTF(": Work group size ");
        dataExtra = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, dataWorkGroupSize);
        toString = concatString2(env, toString, nameInfo, value, dataTemp, dataExtra);
        dataTemp = env->NewStringUTF(": Compile work group size ");
        dataExtra = (jstring)env->CallStaticObjectMethod(Arrays, toStringArrayInt, dataCompileWorkGroupSize);
        toString = concatString2(env, toString, nameInfo, value, dataTemp, dataExtra);
        dataTemp = env->NewStringUTF(": Local memory size(bytes) ");
        dataExtra = (jstring)env->CallStaticObjectMethod(Long, toStringLong, dataLocalMemorySize);
        toString = concatString2(env, toString, nameInfo, value, dataTemp, dataExtra);
        dataTemp = env->NewStringUTF(": Preferred work size multiple ");
        dataExtra = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, dataPreferredWorkSizeMultiple);
        toString = concatString2(env, toString, nameInfo, value, dataTemp, dataExtra);
        dataTemp = env->NewStringUTF(": Private memory size(bytes) ");
        dataExtra = (jstring)env->CallStaticObjectMethod(Long, toStringLong, dataPrivateMemorySize);
        toString = concatString2(env, toString, nameInfo, value, dataTemp, dataExtra);
        dataTemp = env->NewStringUTF(": Max number sub groups ");
        dataExtra = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, dataMaxNumberSubGroups);
        toString = concatString2(env, toString, nameInfo, value, dataTemp, dataExtra);
        dataTemp = env->NewStringUTF(": Compile num sub groups ");
        dataExtra = (jstring)env->CallStaticObjectMethod(Integer, toStringInteger, dataCompileNumSubGroups);
        toString = concatString2(env, toString, nameInfo, value, dataTemp, dataExtra);
    }
    jstring argumentAddressQualifier = env->NewStringUTF("none");
    jstring argumentAccessQualifier = env->NewStringUTF("none");
    jstring argumentTypeName = env->NewStringUTF("none");
    jstring argumentTypeQualifier = env->NewStringUTF("none");
    jstring argumentName = env->NewStringUTF("none");
    if (numberArguments > 0) {
        argumentAddressQualifier = (jstring)env->CallObjectMethod(kernel, getArgumentAddressQualifier);
        argumentAccessQualifier = (jstring)env->CallObjectMethod(kernel, getArgumentAccessQualifier);
        argumentTypeName = (jstring)env->CallObjectMethod(kernel, getArgumentTypeName);
        argumentTypeQualifier = (jstring)env->CallObjectMethod(kernel, getArgumentTypeQualifier);
        argumentName = (jstring)env->CallObjectMethod(kernel, getName);
    }
    nameInfo = env->NewStringUTF("");
    toString = concatString(env, toString, argumentAddressQualifier, nameInfo, nameInfo);
    toString = concatString(env, toString, argumentAccessQualifier, nameInfo, nameInfo);
    toString = concatString(env, toString, argumentTypeName, nameInfo, nameInfo);
    toString = concatString(env, toString, argumentTypeQualifier, nameInfo, nameInfo);
    toString = concatString(env, toString, argumentName, nameInfo, nameInfo);
    return toString;
}
jstring concatString(JNIEnv *env, jstring toString, jstring nameInfo, jstring value, jstring dataExtra) {
    jclass String = env->FindClass("java/lang/String");
    jmethodID concat = env->GetMethodID(String, "concat", "(Ljava/lang/String;)Ljava/lang/String;");
    jstring newLine = env->NewStringUTF("\n");
    toString = (jstring)env->CallObjectMethod(toString, concat, nameInfo);
    toString = (jstring)env->CallObjectMethod(toString, concat, value);
    toString = (jstring)env->CallObjectMethod(toString, concat, dataExtra);
    toString = (jstring)env->CallObjectMethod(toString, concat, newLine);
    return toString;
}
jstring concatString2(JNIEnv *env, jstring toString, jstring nameInfo, jstring data, jstring value, jstring dataExtra) {
    jclass String = env->FindClass("java/lang/String");
    jmethodID concat = env->GetMethodID(String, "concat", "(Ljava/lang/String;)Ljava/lang/String;");
    toString = (jstring)env->CallObjectMethod(toString, concat, nameInfo);
    toString = (jstring)env->CallObjectMethod(toString, concat, data);
    toString = (jstring)env->CallObjectMethod(toString, concat, value);
    toString = (jstring)env->CallObjectMethod(toString, concat, dataExtra);
    toString = (jstring)env->CallObjectMethod(toString, concat, env->NewStringUTF("\n"));
    return toString;
}
jstring getNameImageChannelOrder(JNIEnv *env, jint value) {
    jstring name;
    switch(value) {
        case 0x10B0: name = env->NewStringUTF("ImageFormat.R"); break;
        case 0x10B1: name = env->NewStringUTF("ImageFormat.A"); break;
        case 0x10B2: name = env->NewStringUTF("ImageFormat.RG"); break;
        case 0x10B3: name = env->NewStringUTF("ImageFormat.RA"); break;
        case 0x10B4: name = env->NewStringUTF("ImageFormat.RGB"); break;
        case 0x10B5: name = env->NewStringUTF("ImageFormat.RGBA"); break;
        case 0x10B6: name = env->NewStringUTF("ImageFormat.BGRA"); break;
        case 0x10B7: name = env->NewStringUTF("ImageFormat.ARGB"); break;
        case 0x10B8: name = env->NewStringUTF("ImageFormat.INTENSITY"); break;
        case 0x10B9: name = env->NewStringUTF("ImageFormat.LUMINANCE"); break;
        case 0x10BA: name = env->NewStringUTF("ImageFormat.Rx"); break;
        case 0x10BB: name = env->NewStringUTF("ImageFormat.RGx"); break;
        case 0x10BC: name = env->NewStringUTF("ImageFormat.RGBx"); break;
        case 0x10BD: name = env->NewStringUTF("ImageFormat.DEPTH"); break;
        case 0x10BE: name = env->NewStringUTF("ImageFormat.DEPTH_STENCIL"); break;
        case 0x10BF: name = env->NewStringUTF("ImageFormat.sRGB"); break;
        case 0x10C0: name = env->NewStringUTF("ImageFormat.sRGBx"); break;
        case 0x10C1: name = env->NewStringUTF("ImageFormat.sRGBA"); break;
        case 0x10C2: name = env->NewStringUTF("ImageFormat.sBGRA"); break;
        case 0x10C3: name = env->NewStringUTF("ImageFormat.ABGR"); break;
    }
    return name;
}
jstring getNameImageChannelDataType(JNIEnv *env, jint value) {
    jstring name;
    switch(value) {
        case 0x10D0: name = env->NewStringUTF("ImageFormat.SNORM_INT8"); break;
        case 0x10D1: name = env->NewStringUTF("ImageFormat.SNORM_INT16"); break;
        case 0x10D2: name = env->NewStringUTF("ImageFormat.UNORM_INT8"); break;
        case 0x10D3: name = env->NewStringUTF("ImageFormat.UNORM_INT16"); break;
        case 0x10D4: name = env->NewStringUTF("ImageFormat.UNORM_SHORT565"); break;
        case 0x10D5: name = env->NewStringUTF("ImageFormat.UNORM_SHORT555"); break;
        case 0x10D6: name = env->NewStringUTF("ImageFormat.UNORM_INT_101010"); break;
        case 0x10D7: name = env->NewStringUTF("ImageFormat.SIGNED_INT8"); break;
        case 0x10D8: name = env->NewStringUTF("ImageFormat.SIGNED_INT16"); break;
        case 0x10D9: name = env->NewStringUTF("ImageFormat.SIGNED_INT32"); break;
        case 0x10DA: name = env->NewStringUTF("ImageFormat.UNSIGNED_INT8"); break;
        case 0x10DB: name = env->NewStringUTF("ImageFormat.UNSIGNED_INT16"); break;
        case 0x10DC: name = env->NewStringUTF("ImageFormat.UNSIGNED_INT32"); break;
        case 0x10DD: name = env->NewStringUTF("ImageFormat.HALF_FLOAT"); break;
        case 0x10DE: name = env->NewStringUTF("ImageFormat.FLOAT"); break;
        case 0x10DF: name = env->NewStringUTF("ImageFormat.UNORM_INT24"); break;
        case 0x10E0: name = env->NewStringUTF("ImageFormat.UNORM_INT_101010_2"); break;
    }
    return name;
}