package com.draico.asvappra.neuralnetworks;

public class Model {
    private int currentModel;
    private boolean isCreated;
    public static int OPERATION_TYPE_ADD = 0;
    public static int OPERATION_TYPE_AVERAGE_POOL_2D = 1;
    public static int OPERATION_TYPE_CONCATENATION = 2;
    public static int OPERATION_TYPE_CONV_2D = 3;
    public static int OPERATION_TYPE_DEPTHWISE_CONV_2D = 4;
    public static int OPERATION_TYPE_DEPTH_TO_SPACE = 5;
    public static int OPERATION_TYPE_DEQUANTIZE = 6;
    public static int OPERATION_TYPE_EMBEDDING_LOOKUP = 7;
    public static int OPERATION_TYPE_FLOOR = 8;
    public static int OPERATION_TYPE_FULLY_CONNECTED = 9;
    public static int OPERATION_TYPE_HASTABLE_LOOKUP = 10;
    public static int OPERATION_TYPE_L2_NORMALIZATION = 11;
    public static int OPERATION_TYPE_L2_POOL_2D = 12;
    public static int OPERATION_TYPE_LOCAL_RESPONSE_NORMALIZATION = 13;
    public static int OPERATION_TYPE_LOGISTIC = 14;
    public static int OPERATION_TYPE_LSH_PROJECTION = 15;
    public static int OPERATION_TYPE_LSTM = 16;
    public static int OPERATION_TYPE_MAX_POOL_2D = 17;
    public static int OPERATION_TYPE_MUL = 18;
    public static int OPERATION_TYPE_RELU = 19;
    public static int OPERATION_TYPE_RELU1 = 20;
    public static int OPERATION_TYPE_RELU6 = 21;
    public static int OPERATION_TYPE_RESHAPE = 22;
    public static int OPERATION_TYPE_RESIZE_BILINEAR = 23;
    public static int OPERATION_TYPE_RNN = 24;
    public static int OPERATION_TYPE_SOFTMAX = 25;
    public static int OPERATION_TYPE_SPACE_TO_DEPTH = 26;
    public static int OPERATION_TYPE_SVDF = 27;
    public static int OPERATION_TYPE_TANH = 28;
    public static int OPERATION_TYPE_BATCH_TO_SPACE_ND = 29;
    public static int OPERATION_TYPE_DIV = 30;
    public static int OPERATION_TYPE_MEAN = 31;
    public static int OPERATION_TYPE_PAD = 32;
    public static int OPERATION_TYPE_SPACE_TO_BATCH_ND = 33;
    public static int OPERATION_TYPE_SQUEEZE = 34;
    public static int OPERATION_TYPE_STRIDED_SLICE = 35;
    public static int OPERATION_TYPE_SUB = 36;
    public static int OPERATION_TYPE_TRANSPOSE = 37;
    public static int OPERATION_TYPE_ABS = 38;
    public static int OPERATION_TYPE_ARGMAX = 39;
    public static int OPERATION_TYPE_ARGMIN = 40;
    public static int OPERATION_TYPE_AXIS_ALIGNED_BBOX_TRANSFORM = 41;
    public static int OPERATION_TYPE_BIDIRECTIONAL_SEQUENCE_LSTM = 42;
    public static int OPERATION_TYPE_BIDIRECTIONAL_SEQUENCE_RNN = 43;
    public static int OPERATION_TYPE_BOX_WITH_NMS_LIMIT = 44;
    public static int OPERATION_TYPE_CAST = 45;
    public static int OPERATION_TYPE_CHANNEL_SHUFFLE = 46;
    public static int OPERATION_TYPE_DETECTION_POSTPROCESSING = 47;
    public static int OPERATION_TYPE_EQUAL = 48;
    public static int OPERATION_TYPE_EXP = 49;
    public static int OPERATION_TYPE_EXPAND_DIMS = 50;
    public static int OPERATION_TYPE_GATHER = 51;
    public static int OPERATION_TYPE_GENERATE_PROPOSALS = 52;
    public static int OPERATION_TYPE_GREATER = 53;
    public static int OPERATION_TYPE_GREATER_EQUAL = 54;
    public static int OPERATION_TYPE_GROUPED_CONV_2D = 55;
    public static int OPERATION_TYPE_HEATMAP_MAX_KEYPOINT = 56;
    public static int OPERATION_TYPE_INSTANCE_NORMALIZATION = 57;
    public static int OPERATION_TYPE_LESS = 58;
    public static int OPERATION_TYPE_LESS_EQUAL = 59;
    public static int OPERATION_TYPE_LOG = 60;
    public static int OPERATION_TYPE_LOGICAL_AND = 61;
    public static int OPERATION_TYPE_LOGICAL_NOT = 62;
    public static int OPERATION_TYPE_LOGICAL_OR = 63;
    public static int OPERATION_TYPE_LOG_SOFTMAX = 64;
    public static int OPERATION_TYPE_MAXIMUM = 65;
    public static int OPERATION_TYPE_MINIMUM = 66;
    public static int OPERATION_TYPE_NEG = 67;
    public static int OPERATION_TYPE_NOT_EQUAL = 68;
    public static int OPERATION_TYPE_PAD_V2 = 69;
    public static int OPERATION_TYPE_POW = 70;
    public static int OPERATION_TYPE_PRELU = 71;
    public static int OPERATION_TYPE_QUANTIZE = 72;
    public static int OPERATION_TYPE_QUANTIZED_16BIT_LSTM = 73;
    public static int OPERATION_TYPE_RANDOM_MULTINOMIAL = 74;
    public static int OPERATION_TYPE_REDUCE_ALL = 75;
    public static int OPERATION_TYPE_REDUCE_ANY = 76;
    public static int OPERATION_TYPE_REDUCE_MAX = 77;
    public static int OPERATION_TYPE_REDUCE_MIN = 78;
    public static int OPERATION_TYPE_REDUCE_PROD = 79;
    public static int OPERATION_TYPE_REDUCE_SUM = 80;
    public static int OPERATION_TYPE_ROI_ALIGN = 81;
    public static int OPERATION_TYPE_ROI_POOLING = 82;
    public static int OPERATION_TYPE_RSQRT = 83;
    public static int OPERATION_TYPE_SELECT = 84;
    public static int OPERATION_TYPE_SIN = 85;
    public static int OPERATION_TYPE_SLICE = 86;
    public static int OPERATION_TYPE_SPLIT = 87;
    public static int OPERATION_TYPE_SQRT = 88;
    public static int OPERATION_TYPE_TILE = 89;
    public static int OPERATION_TYPE_TOPK_V2 = 90;
    public static int OPERATION_TYPE_TRANSPOSE_CONV_2D = 91;
    public static int OPERATION_TYPE_UNIDIRECTIONAL_SEQUENCE_LSTM = 92;
    public static int OPERATION_TYPE_UNIDIRECTIONAL_SEQUENCE_RNN = 93;
    public static int OPERATION_TYPE_RESIZE_NEAREST_NEIGHBOR = 94;
    public static int OPERATION_TYPE_QUANTIZED_LSTM = 95;
    public static int OPERATION_TYPE_IF = 96;
    public static int OPERATION_TYPE_WHILE = 97;
    public static int OPERATION_TYPE_ELU = 98;
    public static int OPERATION_TYPE_HARD_SWISH = 99;
    public static int OPERATION_TYPE_FILL = 100;
    public static int OPERATION_TYPE_RANK = 101;
    public static native Model newModel();
    public static native long getDefaultLoopTimeout();
    public static native long getMaximumLoopTimeout();
    public native void finish();
    public native void delete();
    public native void addOperand(OperandType operandType);
    public native void addOperation(int operationType, int[] inputs, int[] outputs);
    public native void getSupportedOperationsForDevices(Device[] devices, boolean[] isSupportedOps);
    public native void identifyInputsAndOutputs(int[] inputs, int[] outputs);
    public native void relaxComputationFloat32toFloat16(boolean allow);
    public native void setOperandSymmPerChannelQuantParams(SymmPerChannelQuantParams symmPerChannelQuantParams, int indexOperand);
    public native void setOperandValue(int indexOperand, Object value);
    public native void setOperandValueFromMemory(Memory memory, int indexOperand, int offset, int size);
    public native void setOperandValueFromModel(Model modelSrc, int indexOperand);
}
